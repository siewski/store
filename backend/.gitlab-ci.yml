---
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  SAST_EXCLUDED_ANALYZERS: "eslint,gosec,nodejs-scan"
  
image: golang:1.18

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
  - test
  - build-code
  - build-docker
  - release
sonarqube-backend-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint:
      - ""
  variables:
    SONAR_USER_HOME: ${CI_PROJECT_DIR}/.sonar
    GIT_DEPTH: "0"
  script:
    - cd ${CI_PROJECT_DIR}/backend
    - sonar-scanner -Dsonar.sources=. -Dsonar.projectKey=07_MOSIEVSKIKH_MOMO_STORE_BACKEND ${scanner_opt}
  allow_failure: true

build-code-job:
  stage: build-code
  script:
    - cd backend
    - mkdir -p bin
    - go build -o bin ./...
    - cd .. 
    # Загрузка артефакта
    - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file ../api-${VERSION} ${NEXUS_REPO_URL}/momo-store-mosievskikh-backend/${VERSION}/api-${VERSION}
  artifacts:
    paths:
      - api-${VERSION}

build-docker-backend:
  stage: build-docker
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cp api-${VERSION} backend/
    - cd backend
    - >
      docker build 
      --build-arg VERSION=$VERSION 
      --tag $CI_REGISTRY_IMAGE/backend:$VERSION 
      .
    - docker push $CI_REGISTRY_IMAGE/backend:$VERSION
upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/backend:$VERSION
    - docker tag $CI_REGISTRY_IMAGE/backend:$VERSION $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:latest
